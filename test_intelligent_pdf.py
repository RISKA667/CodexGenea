#!/usr/bin/env python3
"""
Script de test pour analyser intelligemment le PDF de 614 pages
et extraire automatiquement les registres paroissiaux
"""

import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire au PATH
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def tester_pdf_intelligent():
    """Test de l'analyse intelligente du PDF"""
    
    pdf_file = "inventairesommai03archuoft.pdf"
    
    if not Path(pdf_file).exists():
        print(f"‚ùå Fichier PDF non trouv√©: {pdf_file}")
        print("Assurez-vous que le fichier est dans le m√™me r√©pertoire")
        return False
    
    print("ü§ñ ANALYSE INTELLIGENTE DU PDF")
    print("=" * 50)
    print(f"Fichier: {pdf_file}")
    print(f"Objectif: D√©tecter automatiquement les registres paroissiaux")
    print()
    
    try:
        # Importer l'analyseur intelligent
        from smart_pdf_analyzer import analyser_et_traiter_pdf
        
        # Option 1: Analyse compl√®te (peut √™tre long)
        print("‚ö†Ô∏è  Ce PDF fait 614 pages. Options:")
        print("1. Analyse rapide (100 premi√®res pages)")
        print("2. Analyse compl√®te (toutes les pages - plus long)")
        print("3. Analyse moyenne (300 pages)")
        
        choix = input("\nChoisissez (1/2/3) [1]: ").strip() or "1"
        
        if choix == "1":
            max_pages = 100
            print(f"üöÄ Analyse rapide des 100 premi√®res pages...")
        elif choix == "3":
            max_pages = 300
            print(f"üöÄ Analyse de 300 pages...")
        else:
            max_pages = None
            print(f"üöÄ Analyse compl√®te des 614 pages (cela peut prendre quelques minutes)...")
        
        # Lancer l'analyse intelligente
        resultat = analyser_et_traiter_pdf(pdf_file, max_pages)
        
        if resultat:
            print(f"\nüéâ SUCC√àS!")
            print("=" * 15)
            print(f"‚úÖ Pages de registres trouv√©es: {resultat['pages_registres']}")
            print(f"‚úÖ Personnes identifi√©es: {resultat['statistiques']['persons']['total_persons']}")
            print(f"‚úÖ Actes d√©tect√©s: {resultat['statistiques']['actes']['total_actes']}")
            
            # Sauvegarder les r√©sultats
            sauvegarder_resultats(resultat)
            
        else:
            print(f"\n‚ö†Ô∏è  R√âSULTAT MITIG√â")
            print("=" * 20)
            print("Possible que les registres paroissiaux soient:")
            print("‚Ä¢ Dans les pages non analys√©es (si analyse partielle)")
            print("‚Ä¢ Dans un format tr√®s diff√©rent")
            print("‚Ä¢ Absents de ce document")
            print("\nEssayez une analyse plus compl√®te ou v√©rifiez le contenu manuellement")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        print("Assurez-vous que PyMuPDF est install√©: pip install PyMuPDF")
        return False
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        return False

def sauvegarder_resultats(resultat):
    """Sauvegarde les r√©sultats dans des fichiers"""
    
    try:
        import json
        from datetime import datetime
        
        # Cr√©er un dossier de r√©sultats
        output_dir = Path("resultats_pdf")
        output_dir.mkdir(exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # Sauvegarder les statistiques
        stats_file = output_dir / f"statistiques_{timestamp}.json"
        with open(stats_file, 'w', encoding='utf-8') as f:
            json.dump(resultat['statistiques'], f, indent=2, ensure_ascii=False)
        
        # Sauvegarder le rapport g√©n√©alogique
        rapport_file = output_dir / f"rapport_genealogique_{timestamp}.txt"
        with open(rapport_file, 'w', encoding='utf-8') as f:
            # Rediriger l'output du rapport vers le fichier
            import contextlib, io
            f_buffer = io.StringIO()
            
            try:
                from exporters.report_generator import ReportGenerator
                with contextlib.redirect_stdout(f_buffer):
                    ReportGenerator.print_formatted_results(resultat['resultats_genealogiques'])
                f.write(f_buffer.getvalue())
            except:
                f.write("Erreur g√©n√©ration rapport format√©\n")
                f.write(str(resultat['resultats_genealogiques']))
        
        print(f"\nüíæ R√âSULTATS SAUVEGARD√âS")
        print("=" * 25)
        print(f"üìä Statistiques: {stats_file}")
        print(f"üìã Rapport: {rapport_file}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur sauvegarde: {e}")

def mode_demo():
    """Mode d√©mo avec exemple simple"""
    
    print("üé≠ MODE D√âMO - TEST AVEC EXEMPLE")
    print("=" * 40)
    
    # Cr√©er un fichier exemple avec vrai contenu paroissial
    exemple_registre = """1643-1687. ‚Äî Bapt., mar., inh. ‚Äî Charles de Montigny, Guillaume Le Breton, cur√©s.
‚Äî ¬´ L'an de gr√¢ce 1643, le dimanche 8e jour de mars, moy, Charles Demontigny, prestre, 
ay, au nom de Dieu, pris possession du b√©n√©fice Notre-Dame d'Esm√©ville, sans aucune opposition. ¬ª 
‚Äî 1646, 13 f√©v., d√©c√®s, le 14, inhumation, dans l'√©glise, de Jean Le Boucher, √©cuyer, sr de Br√©ville. 
‚Äî 1651, 23 janv., inh., dans l'√©glise, de Fran√ßoise Picot, √©pouse de Charles Le Boucher, 
√©c., sr du Hausey, avocat du Roi au si√®ge de Saint-Sylvain; 24 oct., naissance, bapt., 
et, le 21 nov., c√©r√©monies du bapt. de Charlotte, fille de Jean Le Boucher, √©c., sr de 
La Granville, et de Fran√ßoise Varin; marr.: Perrette Dupr√©; parr.: Charles Le Boucher, 
√©c., sr du Hozey, conseiller et avocat du Roi √† Saint-Sylvain."""
    
    try:
        from main import GenealogyParser
        from exporters.report_generator import ReportGenerator
        
        parser = GenealogyParser()
        resultat = parser.process_document(exemple_registre, "Notre-Dame d'Esm√©ville")
        
        print("‚úÖ EXEMPLE DE R√âSULTAT ATTENDU:")
        print("=" * 35)
        ReportGenerator.print_formatted_results(resultat)
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur mode d√©mo: {e}")
        return False

def main():
    """Menu principal"""
    
    print("üîç ANALYSEUR PDF INTELLIGENT POUR REGISTRES PAROISSIAUX")
    print("=" * 65)
    print()
    print("Options:")
    print("1. Analyser le PDF complet (intelligent)")
    print("2. Mode d√©mo avec exemple")
    print("3. Quitter")
    print()
    
    choix = input("Choisissez une option (1/2/3) [1]: ").strip() or "1"
    
    if choix == "1":
        success = tester_pdf_intelligent()
    elif choix == "2":
        success = mode_demo()
    else:
        print("Au revoir!")
        return
    
    if success:
        print(f"\n‚ú® TERMIN√â AVEC SUCC√àS!")
    else:
        print(f"\n‚ö†Ô∏è  Voir les erreurs ci-dessus")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n\n‚èπÔ∏è  Interrupted by user")
    except Exception as e:
        print(f"\nüí• Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()