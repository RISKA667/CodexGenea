# guide_utilisation_csv.py
"""
Guide d'utilisation du Smart PDF Analyzer avec export CSV automatique
Instructions compl√®tes pour obtenir vos donn√©es dans RESULT/
"""

def afficher_guide():
    """Affiche le guide d'utilisation complet"""
    
    print("""
SMART PDF ANALYZER - GUIDE D'UTILISATION CSV
============================================

√âTAPE 1: PR√âPARATION
-------------------
1. Assurez-vous d'avoir ces fichiers:
   - smart_pdf_analyzer.py (version corrig√©e)
   - fix_document_closed.py
   - csv_exporter.py

2. Installez les d√©pendances si n√©cessaire:
   pip install pandas

√âTAPE 2: UTILISATION SIMPLE
---------------------------
Commande de base (export CSV automatique):

python smart_pdf_analyzer.py votre_fichier.pdf

R√©sultat: Dossier RESULT/ cr√©√© avec tous les fichiers CSV

√âTAPE 3: OPTIONS AVANC√âES
-------------------------
Avec limitation de pages:
python smart_pdf_analyzer.py votre_fichier.pdf --max-pages 100

Avec dossier personnalis√©:
python smart_pdf_analyzer.py votre_fichier.pdf --csv-dir MON_DOSSIER

Avec sauvegarde JSON en plus:
python smart_pdf_analyzer.py votre_fichier.pdf --output resultats.json

Mode verbeux pour debug:
python smart_pdf_analyzer.py votre_fichier.pdf --verbose

√âTAPE 4: FICHIERS CR√â√âS
-----------------------
Dans le dossier RESULT/, vous trouverez:

üìÑ filiations.csv
   Colonnes: ID, Enfant, P√®re, M√®re, Source_Texte, Confiance
   Tri√© par: Nom de l'enfant puis du p√®re

üìÑ mariages.csv
   Colonnes: ID, √âpouse, √âpoux, Statut, Source_Texte, Confiance
   Tri√© par: Nom de l'√©pouse puis de l'√©poux

üìÑ parrainages.csv
   Colonnes: ID, Type, Personne, Source_Texte, Confiance
   Tri√© par: Type (parrain/marraine) puis nom

üìÑ personnes.csv
   Colonnes: ID, Nom_Complet, Pr√©noms, Nom_Famille, Occurrences
   Tri√© par: Nom de famille puis pr√©noms

üìÑ relations_consolidees.csv
   Toutes les relations dans un seul fichier
   Colonnes: ID, Type_Relation, Personne_Principale, etc.

üìÑ resume_general.csv
   Statistiques et m√©triques du traitement

üìÑ INDEX.txt
   Liste de tous les fichiers cr√©√©s avec descriptions

√âTAPE 5: EXPORT UNIQUEMENT (si vous avez d√©j√† des r√©sultats)
------------------------------------------------------------
Si vous avez un fichier JSON de r√©sultats:

python csv_exporter.py resultats.json

Ou vers un dossier sp√©cifique:
python csv_exporter.py resultats.json MON_DOSSIER

√âTAPE 6: EXEMPLE COMPLET
------------------------
""")

def exemple_utilisation_complete():
    """Exemple d'utilisation compl√®te"""
    
    print("""
EXEMPLE PRATIQUE
================

1. Lancer l'analyse:
   python smart_pdf_analyzer.py inventaire.pdf --max-pages 50

2. R√©sultat attendu:
   Smart PDF Analyzer - Version 3.0.0
   ==================================================
   Fichier: inventaire.pdf
   Limite pages: 50
   Export CSV: RESULT
   
   [... traitement ...]
   
   TRAITEMENT TERMIN√â AVEC SUCC√àS
   ==================================================
   Pages de registres trouv√©es: 35
   Personnes extraites: 1247
   Relations familiales: 892
     - Filiations: 245
     - Mariages: 67
     - Parrainages: 580
   
   Export CSV automatique vers RESULT
   ------------------------------
   Fichiers CSV cr√©√©s:
     - filiations: filiations.csv
     - mariages: mariages.csv
     - parrainages: parrainages.csv
     - personnes: personnes.csv
     - consolide: relations_consolidees.csv
     - resume: resume_general.csv
   
   Tous les fichiers sont dans le dossier: C:\\...\\RESULT

3. Ouvrir les fichiers:
   - Excel: Ouvrir directement les fichiers .csv
   - LibreOffice: Importer avec s√©parateur virgule, UTF-8
   - Google Sheets: Importer les fichiers CSV

STRUCTURE DES DONN√âES
====================

filiations.csv - Exemple:
ID,Enfant,P√®re,M√®re,Source_Texte,Confiance
1,Marie Dupont,Jean Dupont,Anne Martin,"Marie fille de Jean Dupont et Anne Martin",0.85
2,Pierre Martin,Louis Martin,,"Pierre fils de Louis Martin",0.65

mariages.csv - Exemple:
ID,√âpouse,√âpoux,Statut,Source_Texte,Confiance
1,Marie Leblanc,Jean Dupont,mari√©e,"Marie Leblanc √©pouse de Jean Dupont",0.90
2,Anne Durand,Pierre Martin,veuve,"Anne Durand veuve de Pierre Martin",0.75

personnes.csv - Exemple:
ID,Nom_Complet,Pr√©noms,Nom_Famille,Occurrences
1,Jean Dupont,Jean,Dupont,15
2,Marie Martin,Marie,Martin,8

CONSEILS D'UTILISATION
======================

üéØ Pour de meilleurs r√©sultats:
   - Limitez √† 50-100 pages pour les premiers tests
   - Utilisez --verbose pour comprendre le processus
   - V√©rifiez le fichier INDEX.txt pour un r√©sum√©

üìä Pour analyser les donn√©es:
   - Ouvrez relations_consolidees.csv pour une vue d'ensemble
   - Utilisez filiations.csv pour construire des arbres g√©n√©alogiques
   - Filtrez les donn√©es par confiance (>0.7 recommand√©)

üîß En cas de probl√®me:
   - V√©rifiez que tous les fichiers .py sont dans le m√™me dossier
   - Utilisez --verbose pour voir les d√©tails
   - Consultez INDEX.txt pour v√©rifier les exports

üöÄ Pour aller plus loin:
   - Importez les CSV dans votre logiciel de g√©n√©alogie
   - Utilisez Excel/LibreOffice pour cr√©er des graphiques
   - Croisez les donn√©es entre les diff√©rents fichiers
""")

def tester_systeme():
    """Test rapide du syst√®me"""
    
    print("TEST DU SYST√àME CSV")
    print("=" * 25)
    
    # V√©rifier les modules
    modules_requis = [
        'smart_pdf_analyzer.py',
        'fix_document_closed.py', 
        'csv_exporter.py'
    ]
    
    from pathlib import Path
    
    print("V√©rification des fichiers:")
    for module in modules_requis:
        if Path(module).exists():
            print(f"  ‚úÖ {module}")
        else:
            print(f"  ‚ùå {module} - MANQUANT")
    
    # V√©rifier les imports
    print("\nV√©rification des imports:")
    try:
        import pandas
        print("  ‚úÖ pandas")
    except ImportError:
        print("  ‚ö†Ô∏è pandas - Optionnel mais recommand√©")
    
    try:
        import fitz
        print("  ‚úÖ PyMuPDF")
    except ImportError:
        print("  ‚ùå PyMuPDF - REQUIS")
    
    print("\nPour installer les d√©pendances manquantes:")
    print("pip install PyMuPDF pandas")
    
    print(f"\nSyst√®me pr√™t ! Lancez:")
    print(f"python smart_pdf_analyzer.py votre_fichier.pdf")

if __name__ == "__main__":
    afficher_guide()
    print("\n" + "="*60)
    exemple_utilisation_complete()
    print("\n" + "="*60)
    tester_systeme()